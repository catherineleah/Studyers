<style type="text/css"><!--
      #container { position: relative; }
      #imageView { border: 1px solid #000; }
      #imageTemp { position: absolute; top: 1px; left: 1px; }
			.dtool {width: 200px; border: 2px solid red; cursor: pointer;}
    --></style>
<script> 
(function( $ ){
  $.fn.studyEditor = function() {
		var lessonText = $("#lesson_body").val();
		//console.log(lessonText);
		$("#lesson_body").hide();
		$("#lesson_body").after('<div id="text-editor" contentEditable="true">'+lessonText+'</div>');

    $("#lesson_submit").click(function(){
	    var oCanvas = document.getElementById("imageView");
  	  $("#lesson_attachment64").val(oCanvas.toDataURL());
			
			var textSave = $("#text-editor").html();
			$("#lesson_body").val(textSave);
				
  	});
};
})( jQuery );
</script>

<script>
$(document).ready(function() {
    $("form").studyEditor();
    //$('#lesson-canvas').lessonCanvas();
	    
});
</script>

<%= form_for([@notebook, @lesson]) do |f| %>
  <% if @lesson.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@lesson.errors.count, "error") %> prohibited this lesson from being saved:</h2>

      <ul>
      <% @lesson.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
      </ul>
    </div>
  <% end %>
	
  <div class="field">
    <%= f.label :title %><br />
    <%= f.text_field :title %>
  </div>
  <div class="field">
  	<input id="bold" class="edit-buttons" value="bold" type="button" />
		<input id="italic" class="edit-buttons" value="italic" type="button" />
		<input id="underline" class="edit-buttons" value="Underline" type="button" />
		<input id="hilitecolor" class="edit-buttons" attribute="yellow" value="hilite yellow" type="button" />
		<input id="hilitecolor" class="edit-buttons" attribute="#659b41" value="hilite green" type="button" />
		
		<input id="increasefontsize" class="edit-buttons" value="A+" type="button"  />
		<input id="decreasefontsize" class="edit-buttons" value="A-" type="button"  />
		
		<script>
			$('.edit-buttons').click(function() {
				var command = $(this).attr('id');
				var Attribute = $(this).attr('attribute') ? $(this).attr('attribute') : null;  
				document.execCommand(command,false,Attribute);
			});
		
		</script>
		
    <%= f.label :body %><br />
    <%= f.text_area :body%>
		
		
		 <p><label>Drawing tool: </label><div id="dtool">
        <div class="dtool" id="line">Line</div>
        <div class="dtool" id="rect">Rectangle</div>
        <div class="dtool" id="pencil">Pencil</div>
    </div></p>
		<div class="colors">
      <div class="color" id="colorGreen">Green</div>
      <div class="color" id="colorYellow">Yellow</div>
			<div class="color" id="colorBlack">Black</div>
			<div class="color" id="colorBlue">Blue</div>
			<div class="color" id="colorBrown">Brown</div>
    </div>
		<div class="widths">
			<div class="width" id="smallWidth">small</div>
			<div class="width" id="mediumWidth">medium</div>
			<div class="width" id="largeWidth">large</div>
			
		</div>

    <div id="container">
      <canvas id="imageView" width="400" height="300">
        
      </canvas>
    </div>
		 
  </div>


<script type="text/javascript">

// Keep everything in anonymous function, called on window load.
if(window.addEventListener) {
window.addEventListener('load', function () {
  var canvas, context, canvaso, contexto;

  // The active tool instance.
  var tool;
  var tool_default = 'pencil';

  function init () {
    // Find the canvas element.
    canvaso = document.getElementById('imageView');
    if (!canvaso) {
      alert('Error: I cannot find the canvas element!');
      return;
    }

    if (!canvaso.getContext) {
      alert('Error: no canvas.getContext!');
      return;
    }

    // Get the 2D canvas context.
    contexto = canvaso.getContext('2d');
    if (!contexto) {
      alert('Error: failed to getContext!');
      return;
    }

    // Add the temporary canvas.
    var container = canvaso.parentNode;
    canvas = document.createElement('canvas');
    if (!canvas) {
      alert('Error: I cannot create a new canvas element!');
      return;
    }

    canvas.id     = 'imageTemp';
    canvas.width  = canvaso.width;
    canvas.height = canvaso.height;
    container.appendChild(canvas);

    context = canvas.getContext('2d');
		
		var img = new Image();
		img.onload = function(){
    	canvas.width = img.width;
    	canvas.height = img.height;
    	context.drawImage(img, 0, 0, img.width, img.height);
		}
		var image = document.getElementById("canvas-image");
		img.src = image.src;

    // Get the tool select input.
    var tool_select = document.getElementsByClassName('dtool');
		//console.log(tool_select);
    if (!tool_select) {
      alert('Error: failed to get the dtool element!');
      return;
    }
		
		for (var i = 0 ; i < tool_select.length; i++) {
			//console.log(i);
			tool_select[i].addEventListener('click', ev_tool_change, false);
		}
    
    // Activate the default tool.
    if (tools[tool_default]) {
      tool = new tools[tool_default]();
      tool_select.value = tool_default;
    }

    // Attach the mousedown, mousemove and mouseup event listeners.
    canvas.addEventListener('mousedown', ev_canvas, false);
    canvas.addEventListener('mousemove', ev_canvas, false);
    canvas.addEventListener('mouseup',   ev_canvas, false);
  }


	//color handling:
	// Colors:
  var colorBlue = "#cb3594";
  var colorGreen = "#659b41";
  var colorYellow = "#ffcf33";
  var colorBrown = "#986928";
  var colorBlack ="#333333";
	
	//Default color.
	var curColor = colorBlack;
	// change colors
	$('.color').click(function() {
    var color = $(this).attr("id");
    switch (color) {
      case "colorBrown":
        curColor = colorBrown;
        break;
      case "colorYellow":
        curColor = colorYellow;
        break;
      case "colorGreen":
        curColor = colorGreen;
        break;
      case "colorBlack":
        curColor = colorBlack;
        break;	
			case "colorBlue":
        curColor = colorBlue;
        break;
    }
  });
		
	//context.lineWidth
	// Width 
	var smallWidth = 1;
	var mediumWidth = 4;
	var largeWidth = 8;
	
	// Default width
	var curWidth = smallWidth;
	
	// Width picker
	$('.width').click(function() {
		var toolWidth = $(this).attr("id");
		switch (toolWidth) {
			case "smallWidth":
				curWidth = smallWidth;
				break;
			case "mediumWidth":
				curWidth = mediumWidth;
				break;
			case "largeWidth":
				curWidth = largeWidth;
				break;
		}
	});
			
  // The general-purpose event handler. This function just determines the mouse 
  // position relative to the canvas element.
  function ev_canvas (ev) {
    if (ev.layerX || ev.layerX == 0) { // Firefox
      ev._x = ev.layerX;
      ev._y = ev.layerY;
    } else if (ev.offsetX || ev.offsetX == 0) { // Opera
      ev._x = ev.offsetX;
      ev._y = ev.offsetY;
    }

    // Call the event handler of the tool.
    var func = tool[ev.type];
    if (func) {
      func(ev);
    }
  }

  // The event handler for any changes made to the tool selector.
  function ev_tool_change (ev) {
    //if (tools[this.value]) {
      tool = new tools[this.id]();
    //}
  }

  // This function draws the #imageTemp canvas on top of #imageView, after which 
  // #imageTemp is cleared. This function is called each time when the user 
  // completes a drawing operation.
  function img_update () {
		contexto.drawImage(canvas, 0, 0);
		context.clearRect(0, 0, canvas.width, canvas.height);
  }

  // This object holds the implementation of each drawing tool.
  var tools = {};

  // The drawing pencil.
  tools.pencil = function () {
    var tool = this;
    this.started = false;

    // This is called when you start holding down the mouse button.
    // This starts the pencil drawing.
    this.mousedown = function (ev) {
        context.beginPath();
        context.moveTo(ev._x, ev._y);
        tool.started = true;
    };

    // This function is called every time you move the mouse. Obviously, it only 
    // draws if the tool.started state is set to true (when you are holding down 
    // the mouse button).
    this.mousemove = function (ev) {
      if (tool.started) {
        context.lineTo(ev._x, ev._y);
				context.strokeStyle = curColor;
				context.lineWidth = curWidth;
        context.stroke();
      }
    };

    // This is called when you release the mouse button.
    this.mouseup = function (ev) {
      if (tool.started) {
        tool.mousemove(ev);
        tool.started = false;
        img_update();
      }
    };
  };

  // The rectangle tool.
  tools.rect = function () {
    var tool = this;
    this.started = false;

    this.mousedown = function (ev) {
      tool.started = true;
      tool.x0 = ev._x;
      tool.y0 = ev._y;
    };

    this.mousemove = function (ev) {
      if (!tool.started) {
        return;
      }

      var x = Math.min(ev._x,  tool.x0),
          y = Math.min(ev._y,  tool.y0),
          w = Math.abs(ev._x - tool.x0),
          h = Math.abs(ev._y - tool.y0);

      context.clearRect(0, 0, canvas.width, canvas.height);

      if (!w || !h) {
        return;
      }
			
			context.strokeStyle = curColor;
			context.lineWidth = curWidth;
      context.strokeRect(x, y, w, h);
    };

    this.mouseup = function (ev) {
      if (tool.started) {
        tool.mousemove(ev);
        tool.started = false;
        img_update();
      }
    };
  };

  // The line tool.
  tools.line = function () {
    var tool = this;
    this.started = false;

    this.mousedown = function (ev) {
      tool.started = true;
      tool.x0 = ev._x;
      tool.y0 = ev._y;
    };

    this.mousemove = function (ev) {
      if (!tool.started) {
        return;
      }

      context.clearRect(0, 0, canvas.width, canvas.height);

      context.beginPath();
			context.strokeStyle = curColor;
			context.lineWidth = curWidth;
      context.moveTo(tool.x0, tool.y0);
      context.lineTo(ev._x,   ev._y);
      context.stroke();
      context.closePath();
    };

    this.mouseup = function (ev) {
      if (tool.started) {
        tool.mousemove(ev);
        tool.started = false;
        img_update();
      }
    };
  };

  init();

}, false); }

</script>


  <div class="field" style="clear:both;">
    <%= f.label :permission, "Who can see this lesson?" %><br />
    <%= f.radio_button :permission, 0 %> Only me
    <%= f.radio_button :permission, 1 %> My friends
    <%= f.radio_button :permission, 2 %> Everyone
  </div>
  <%= f.hidden_field :attachment64 %>
  <div class="actions">
    <%= f.submit %>
  </div>
	<% if @lesson.attachement.present? %>
		<%= image_tag @lesson.attachement.url, :id=>"canvas-image" %>
	<% end %>
<% end %>
